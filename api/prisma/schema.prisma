// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
male
female
}

enum Role {
customer
EO
}

enum Status {
Waiting_for_Payment     @map("Waiting for Payment")
Waiting_for_Admin_Approval @map("Waiting for Admin Approval")
Transaction_Completed   @map("Transaction Completed")
Canceled @map("Canceled")
}

enum Ticket {
  Standard
  VIP
}

model RegisteredUsers {
  id Int @id @default(autoincrement())
  username String
  email String @unique
  password String
  role Role? @default(customer)
  isVerified Boolean @default(false)
  registeredAt DateTime @default(now())
  updatedAt DateTime @default(now())
  voucher Voucher []
  event Event []
  userVoucher UserVoucher []
  transaction Transaction []
  eventReview EventReview []
  customer_detail customer_detail?
  eo_detail eo_detail?
  wallet Wallet?
}

model customer_detail {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  address String
  gender Gender?
  phoneNumber Int
  avatarUrl String
  registeredUsers   RegisteredUsers  @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model eo_detail {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  address String
  gender Gender?
  phoneNumber Int
  avatarUrl String
  registeredUsers   RegisteredUsers  @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Wallet {
  userId Int @id @unique
  balance Float
  registeredUsers RegisteredUsers  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Voucher {
  id Int @id @default(autoincrement())
  userId Int
  type String
  percentage Float
  point Float
  referralcode String
  createdAt DateTime @default(now())
  registeredUsers   RegisteredUsers  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userVoucher UserVoucher?
}

model UserVoucher {
  id Int @id @default(autoincrement())
  userId Int
  voucherId Int @unique
  isValid Boolean @default(false)
  registeredUsers   RegisteredUsers  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  voucher Voucher  @relation(fields: [voucherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transaction Transaction?
}

model EventCategory {
  id  Int @id
  categoryName String
  events Event[]
}

model Event {
  id Int @id @default(autoincrement())
  userId Int
  eventName String
  time DateTime
  venue String
  ticket_Type Ticket?
  categoryId Int?
  image_url String?
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  discount Discount []
  transaction Transaction []
  eventReview EventReview []
  registeredUsers   RegisteredUsers  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  standardTicket StandardTicket?
  eventCategory EventCategory?  @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  vipTicket VIPTicket?
}


model StandardTicket {
  id Int @id @default(autoincrement())
  availableSeat Float
  ticketPrice Float
  event   Event  @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model VIPTicket {
  id Int @id @default(autoincrement())
  availableSeat Float
  ticketPrice Float
  event   Event  @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Discount {
  id Int @id @default(autoincrement())
  eventId Int
  discount Int
  startDate DateTime
  endDate DateTime
  event   Event  @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Transaction {
 id Int @id @default(autoincrement())
  invoiceNumber String
  userId Int
  eventId Int
  qty Float
  discount Int
  userVoucherId Int @unique
  totalPayment Float
  paymentStatus Status?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  event   Event  @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  registeredUsers   RegisteredUsers  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userVoucher   UserVoucher  @relation(fields: [userVoucherId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model EventReview {
  id Int @id @default(autoincrement())
  userId Int
  eventId Int
  rating Int
  review String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  registeredUsers   RegisteredUsers  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
   event   Event  @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}